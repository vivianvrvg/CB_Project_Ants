theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
) +
ylim(y_range)
# Arrange the two line plots side by side
grid.arrange(plot_with, plot_without, ncol = 2)
head(food_track_no)
# Add a column to identify the condition (with or without pheromones)
food_track_with$condition <- "With Pheromones"
food_track_no$condition <- "No Pheromones"
View(food_track_no)
# Combine both datasets into one
df_food_tracking <- bind_rows(food_track_with, food_track_no)
# Plot the remaining food for each run, with pheromones vs no pheromones
ggplot(df_food_tracking, aes(x = after_nr_steps, y = remaining_food, group = run, color = condition)) +
geom_line() +
theme_minimal() +
labs(title = "Remaining Food Over Time by Run",
x = "Time Steps (After Every 100 Steps)",
y = "Remaining Food",
color = "Condition") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12)
)
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +  # Blue line for "With Pheromones"
theme_minimal() +
labs(title = "Remaining Food Over Time (With Pheromones)",
x = "Time Steps (After Every 100 Steps)",
y = "Remaining Food") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +  # Orange line for "No Pheromones"
theme_minimal() +
labs(title = "Remaining Food Over Time (No Pheromones)",
x = "Time Steps (After Every 100 Steps)",
y = "Remaining Food") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Arrange the two plots side by side
grid.arrange(plot_with, plot_without, ncol = 2)
# Determine the x-axis limits (based on the maximum number of steps in either dataset)
max_steps <- max(max(food_track_with$after_nr_steps), max(food_track_no$after_nr_steps))
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +  # Blue line for "With Pheromones"
theme_minimal() +
labs(title = "Remaining Food Over Time (With Pheromones)",
x = "Time Steps (After Every 100 Steps)",
y = "Remaining Food") +
scale_x_continuous(limits = c(0, max_steps)) +  # Set the x-axis limits
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +  # Orange line for "No Pheromones"
theme_minimal() +
labs(title = "Remaining Food Over Time (No Pheromones)",
x = "Time Steps (After Every 100 Steps)",
y = "Remaining Food") +
scale_x_continuous(limits = c(0, max_steps)) +  # Set the x-axis limits
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Arrange the two plots side by side
grid.arrange(plot_with, plot_without, ncol = 2)
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create a main title
main_title <- textGrob("Remaining food after every 100 steps in the simulation", gp = gpar(fontsize = 16, fontface = "bold"))
library(gridExtra)
library(grid)
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create a main title
main_title <- textGrob("Remaining food after every 100 steps in the simulation", gp = gpar(fontsize = 16, fontface = "bold"))
# Create subtitles
subtitle_with <- textGrob("With pheromone trails", gp = gpar(fontsize = 14, fontface = "italic"))
subtitle_without <- textGrob("Without pheromone trails", gp = gpar(fontsize = 14, fontface = "italic"))
# Arrange the plots side by side with the titles
grid.arrange(
main_title,
arrangeGrob(subtitle_with, plot_with, ncol = 1),
arrangeGrob(subtitle_without, plot_without, ncol = 1),
nrow = 3,
heights = c(1, 6, 6)  # Adjust the relative height for the titles and plots
)
# Load the datasets
food_track_with <- read.csv('food_tracking_with_pheromones.csv')
food_track_no <- read.csv('food_tracking_no_pheromones.csv')
head(food_track_no)
head(food_track_with)
# Add a column to identify the condition (with or without pheromones)
food_track_with$condition <- "With pheromones"
food_track_no$condition <- "No pheromones"
# Determine the x-axis limits (based on the maximum number of steps in either dataset)
max_steps <- max(max(food_track_with$after_nr_steps), max(food_track_no$after_nr_steps))
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create a main title
main_title <- textGrob("Remaining Food After Every 100 Steps in the Simulation", gp = gpar(fontsize = 16, fontface = "bold"))
# Create subtitles
subtitle_with <- textGrob("With Pheromone Trails", gp = gpar(fontsize = 14, fontface = "italic"))
subtitle_without <- textGrob("Without Pheromone Trails", gp = gpar(fontsize = 14, fontface = "italic"))
# Arrange the plots side by side with the titles
grid.arrange(
main_title,
arrangeGrob(subtitle_with, plot_with, ncol = 1),
arrangeGrob(subtitle_without, plot_without, ncol = 1),
ncol = 2,  # Arrange side by side (2 columns)
heights = c(1, 6),  # Adjust the height for the main title and plots
widths = c(1, 1)  # Equal width for both plots
)
# Load the datasets
food_track_with <- read.csv('food_tracking_with_pheromones.csv')
food_track_no <- read.csv('food_tracking_no_pheromones.csv')
head(food_track_no)
head(food_track_with)
# Add a column to identify the condition (with or without pheromones)
food_track_with$condition <- "With pheromones"
food_track_no$condition <- "No pheromones"
# Determine the x-axis limits (based on the maximum number of steps in either dataset)
max_steps <- max(max(food_track_with$after_nr_steps), max(food_track_no$after_nr_steps))
# Create the plot for "With Pheromones"
plot_with <- ggplot(food_track_with, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#1f77b4") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create the plot for "No Pheromones"
plot_without <- ggplot(food_track_no, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(color = "#ff7f0e") +
theme_minimal() +
labs(title = NULL,
x = "Number of steps taken by all ants",
y = "Remaining food in arena") +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12)
)
# Create a main title
main_title <- textGrob("Remaining food after every 100 steps in the simulation", gp = gpar(fontsize = 16, fontface = "bold"))
# Create subtitles
subtitle_with <- textGrob("With pheromone trails", gp = gpar(fontsize = 14, fontface = "italic"))
subtitle_without <- textGrob("Without pheromone trails", gp = gpar(fontsize = 14, fontface = "italic"))
# Arrange the plots side by side with the titles
grid.arrange(
main_title,
arrangeGrob(subtitle_with, plot_with, ncol = 1),
arrangeGrob(subtitle_without, plot_without, ncol = 1),
ncol = 2,  # Arrange side by side (2 columns)
layout_matrix = rbind(c(1, 1), c(2, 3))  # Place the main title in one row, and the plots in the next
)
# Load the datasets
food_track_with <- read.csv('food_tracking_with_pheromones.csv')
food_track_no <- read.csv('food_tracking_no_pheromones.csv')
# Add a column to identify the condition (with or without pheromones)
food_track_with$condition <- "With pheromones"
food_track_no$condition <- "No pheromones"
# Combine both datasets into one for faceting
food_track_all <- rbind(food_track_with, food_track_no)
# Determine the x-axis limits (based on the maximum number of steps in either dataset)
max_steps <- max(max(food_track_with$after_nr_steps), max(food_track_no$after_nr_steps))
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none"  # Remove the legend for cleaner look
) +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value)  # Facet the plots by condition
# Print the plot
print(plot)
-
-
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none"  # Remove the legend for cleaner look
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value)  # Facet the plots by condition
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none"  # Remove the legend for cleaner look
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value)  # Facet the plots by condition
# Print the plot
print(plot)
# Load the datasets
food_track_with <- read.csv('food_tracking_with_pheromones.csv')
food_track_no <- read.csv('food_tracking_no_pheromones.csv')
# Add a column to identify the condition (with or without pheromones)
food_track_with$condition <- "With pheromone trails"
food_track_no$condition <- "Without pheromone trails"
# Combine both datasets into one for faceting
food_track_all <- rbind(food_track_with, food_track_no)
# Determine the x-axis limits (based on the maximum number of steps in either dataset)
max_steps <- max(max(food_track_with$after_nr_steps), max(food_track_no$after_nr_steps))
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none"  # Remove the legend for cleaner look
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value) +
guides(color = "none")
print(plot)
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none",
strip.text = element_text(size = 12)
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value) +
guides(color = "none")
print(plot)
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 14),
legend.position = "none",
strip.text = element_text(size = 14)
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value) +
guides(color = "none")
print(plot)
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 14),
legend.position = "none",
strip.text = element_text(size = 20)
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value) +
guides(color = "none")
print(plot)
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +  # Different colors for different conditions
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 14),  # Set axis title size
legend.position = "none",  # Remove legend
strip.text = element_text(size = 14)  # Set facet title size (for condition)
) +
facet_wrap(~condition, scales = "free_y", ncol = 2) +  # Facet by condition
guides(color = "none")  # Remove color legend
# Print the plot
print(plot)
# Create the plot
plot <- ggplot(food_track_all, aes(x = after_nr_steps, y = remaining_food, group = run)) +
geom_line(aes(color = condition)) +
theme_minimal() +
labs(
x = "Number of steps taken by all ants",
y = "Remaining food in arena"
) +
scale_x_continuous(limits = c(0, max_steps)) +
theme(
axis.title = element_text(size = 12),
legend.position = "none"
) +
theme_bw() +
facet_wrap(~condition, scales = "free_y", ncol = 2, labeller = label_value) +
guides(color = "none")
print(plot)
setwd("~/Documents/KULeuven/Computational Biology/Project/Scripts/Datasets")
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
library(grid)
# Load data from CSV files
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_no_pheromones.csv")
# Assign group labels
with_pheromones$group <- "with_pheromones"
no_pheromones$group <- "no_pheromones"
# Combine the datasets into one data frame
df <- rbind(with_pheromones, no_pheromones)
# View the first few rows to verify
head(df)
str(df)
print(colnames(df))
df$group <- factor(df$group, levels = c("with_pheromones", "no_pheromones"))
head(df)
str(df)
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_total_steps = mean(total_steps, na.rm = TRUE),
sd_total_steps = sd(total_steps, na.rm = TRUE),
median_total_steps = median(total_steps, na.rm = TRUE),
IQR_total_steps = IQR(total_steps, na.rm = TRUE),
se_total_steps = sd(total_steps, na.rm = TRUE) / sqrt(count)
)
print(summary_stats)
boxplot(df$total_steps ~ df$group, outline = TRUE)
# Histogram and Density Plot
ggplot(df, aes(x = total_steps, fill = group)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 15) +
geom_density(alpha = 0.2) +
theme_minimal() +
labs(title = "Total steps until food depletion",
x = "Total steps",
y = "Frequency") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +
theme(legend.title = element_blank())
# Shapiro-Wilk Test for normality
shapiro_with <- shapiro.test(with_pheromones$total_steps)
shapiro_without <- shapiro.test(no_pheromones$total_steps)
print(shapiro_with)       # p < 2.2e-16 --> significant deviation from normality
print(shapiro_without)    # p < 2.2e-16 --> significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(total_steps ~ group, data = df)
print(levene_result)     # p < 2.2e-16 --> unequal variances
# Wilcoxon Rank-Sum Test (non-parametric)
wilcox_test_result <- wilcox.test(total_steps ~ group, data = df, exact = FALSE)
print(wilcox_test_result)  # p-value < 2.2e-16 --> significant difference between groups
# Extract Z statistic (Z is derived from the p-value and W statistic)
Z <- qnorm(wilcox_test_result$p.value / 2, lower.tail = FALSE)  # Two-tailed test
Z
# Total sample size
n1 <- sum(df$group == "with_pheromones")
n2 <- sum(df$group == "no_pheromones")
N <- n1 + n2
# Compute r
r <- Z / sqrt(N)
print(r)  # Standardized effect size: 0.7612419
plot_summary <- summary_stats
print(plot_summary)
boxplot_final <- ggplot(df, aes(x = group, y = total_steps, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(
data = plot_summary,
aes(
x = group,
ymin = mean_total_steps - se_total_steps,
ymax = mean_total_steps + se_total_steps
),
inherit.aes = FALSE,  # Ensure it doesn't inherit aesthetics from the global ggplot call
width = 0.2, color = "black"
) +  # Error bars
geom_point(
data = plot_summary,
aes(x = group, y = mean_total_steps),
inherit.aes = FALSE,  # Prevent inherited aesthetics
shape = 23, size = 3, fill = "white"
) +  # Mean points
scale_x_discrete(labels = c(
"with_pheromones" = "With pheromone trails",
"no_pheromones" = "Without pheromone trails"
)) +  # Rename x-axis categories
scale_fill_manual(values = c(
"with_pheromones" = "#1f77b4",
"no_pheromones" = "#ff7f0e"
)) +  # Set custom colors
theme_bw() +
labs(y = "Total steps until food depletion") +
theme(
legend.position = "none",                      # Remove legend
plot.title = element_blank(),                  # Remove title
axis.title.x = element_blank(),                # Remove x-axis label
axis.title.y = element_text(size = 14),        # Keep and enlarge y-axis label
axis.text = element_text(size = 12),           # Enlarge axis tick values
strip.text = element_text(size = 14, face = "bold")  # Enlarge facet condition labels
)
print(boxplot_final)
