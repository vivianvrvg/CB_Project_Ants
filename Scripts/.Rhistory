labs(title = "Comparison of Food Left by Ants With and Without Pheromones",
x = "Group",
y = "Food Left") +
scale_fill_manual(values = c("With Pheromones" = "#1f77b4", "Without Pheromones" = "#ff7f0e")) +  # Blue and Orange
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14)
)
View(df)
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
# Load data
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_without_pheromones.csv")
# Standardize group labels to match scale_fill_manual()
with_pheromones$group <- "With Pheromones"
no_pheromones$group <- "Without Pheromones"
# Combine the data into one dataset using correct variable names
df <- rbind(with_pheromones, no_pheromones)
head(df)
# Verify column names
print(colnames(df))
# If the column is named differently, rename it for consistency
# For example, if it's "food_left" instead of "remaining_food"
if("food_left" %in% colnames(df)) {
df <- df %>% rename(remaining_food = food_left)
}
# Verify column names
print(colnames(df))
# If the column is named differently, rename it for consistency
# For example, if it's "food_left" instead of "remaining_food"
if("food_left" %in% colnames(df)) {
df <- df %>% rename(remaining_food = food_left)
}
# Convert 'group' to a factor with specified levels
df$group <- factor(df$group, levels = c("With Pheromones", "Without Pheromones"))
head(df)
# Verify column names
print(colnames(df))
# Convert 'group' to a factor with specified levels
df$group <- factor(df$group, levels = c("With Pheromones", "Without Pheromones"))
# Summary statistics by group
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_remaining_food = mean(remaining_food),
sd_remaining_food = sd(remaining_food),
median_remaining_food = median(remaining_food),
IQR_remaining_food = IQR(remaining_food)
)
print(summary_stats)
# Visual inspection raw data - Histogram and Density Plot
ggplot(df, aes(x = remaining_food, fill = group)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 15) +
geom_density(alpha = 0.2) +
theme_minimal() +
labs(title = "Distribution of Food Left by Group",
x = "Food Left",
y = "Frequency") +
scale_fill_manual(values = c("With Pheromones" = "#1f77b4", "Without Pheromones" = "#ff7f0e")) +
theme(legend.title = element_blank())
# Choosing appropriate test: checking normality and homogeneity of variances
# Shapiro-Wilk test for normality
shapiro_with <- shapiro.test(with_pheromones$food_left)
shapiro_without <- shapiro.test(no_pheromones$food_left)
print(shapiro_with)       # p = 0.007022 --> significant deviation from normality
print(shapiro_without)    # p = 0.5381 --> no significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
# One of the datasets is not normally distributed: Wilcoxon Rank-Sum Test (otherwise t-test)
wilcox_test_result <- wilcox.test(remaining_food ~ group, data = df)
print(wilcox_test_result)   # p-value < 2.2e-16 --> significant difference between groups
# Create plot for "With Pheromones"
plot_with <- ggplot(subset(df, group == "With Pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#1f77b4", size = 1) +  # Blue line
theme_minimal() +
labs(title = "With Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create plot for "Without Pheromones"
plot_without <- ggplot(subset(df, group == "Without Pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#ff7f0e", size = 1) +  # Orange line
theme_minimal() +
labs(title = "Without Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Arrange the two line plots side by side
grid.arrange(plot_with, plot_without, ncol = 2)
# Boxplot
# Recalculate summary_stats to include Standard Error (SE)
summary_stats <- df %>%
group_by(group) %>%
summarise(
mean_remaining_food = mean(remaining_food),
se_remaining_food = sd(remaining_food) / sqrt(n())
)
ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
geom_point(data = summary_stats,
plot <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
plot <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = summary_stats,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black") +  # Error bars for mean ± SE
geom_point(data = summary_stats,
aes(x = group, y = mean_remaining_food),
shape = 23, size = 3, fill = "white") +  # Mean points
geom_signif(comparisons = list(c("With Pheromones", "Without Pheromones")),
map_signif_level = TRUE,
textsize = 6,
y_position = max(df$remaining_food)
)
plot
plot <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = summary_stats,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black") +  # Error bars for mean ± SE
geom_point(data = summary_stats,
aes(x = group, y = mean_remaining_food),
shape = 23, size = 3, fill = "white") +  # Mean points
geom_signif(comparisons = list(c("With Pheromones", "Without Pheromones")),
map_signif_level = TRUE,
textsize = 6,
y_position = max(df$remaining_food))
plot
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
# Load data
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_without_pheromones.csv")
# Standardize group labels to match scale_fill_manual()
with_pheromones$group <- "with_pheromones"
no_pheromones$group <- "no_pheromones"
# Combine the data into one dataset using correct variable names
df <- rbind(with_pheromones, no_pheromones)
head(df)
# Verify column names
print(colnames(df))
# Convert 'group' to a factor with specified levels
df$group <- factor(df$group, levels = c("with_pheromones", "no_pheromones"))
# Summary statistics by group
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_remaining_food = mean(remaining_food),
sd_remaining_food = sd(remaining_food),
median_remaining_food = median(remaining_food),
IQR_remaining_food = IQR(remaining_food),
se_remaining_food = sd(remaining_food) / sqrt(n())
)
print(summary_stats)
# Visual inspection raw data - Histogram and Density Plot
ggplot(df, aes(x = remaining_food, fill = group)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 15) +
geom_density(alpha = 0.2) +
theme_minimal() +
labs(title = "Distribution of Food Left by Group",
x = "Food Left",
y = "Frequency") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +
theme(legend.title = element_blank())
# Choosing appropriate test: checking normality and homogeneity of variances
# Shapiro-Wilk test for normality
shapiro_with <- shapiro.test(with_pheromones$remaining_food)
shapiro_without <- shapiro.test(no_pheromones$remaining_food)
print(shapiro_with)       # p = 0.007022 --> significant deviation from normality
print(shapiro_without)    # p = 0.5381 --> no significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
# Perform Wilcoxon Rank-Sum Test since normality is violated in one group
wilcox_test_result <- wilcox.test(remaining_food ~ group, data = df)
print(wilcox_test_result)   # p-value < 2.2e-16 --> significant difference between groups
# Calculate summary statistics for plotting (mean and SE)
plot_summary <- summary_stats
# Create the boxplot
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black") +  # Error bars for mean ± SE
geom_point(data = plot_summary,
aes(x = group, y = mean_remaining_food),
shape = 23, size = 3, fill = "white") +  # Mean points
geom_signif(comparisons = list(c("with_pheromones", "no_pheromones")),
map_signif_level = TRUE,
textsize = 6,
y_position = max(df$remaining_food) + 2) +  # Adjust y_position as needed
theme_minimal() +
labs(title = "Comparison of Food Left by Ants With and Without Pheromones",
x = "Group",
y = "Food Left") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +  # Blue and Orange
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14)
)
# Display the boxplot
print(boxplot_final)
# Install packages if not already installed
required_packages <- c("ggplot2", "dplyr", "car", "ggsignif", "gridExtra")
installed_packages <- rownames(installed.packages())
# Load libraries
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
# Load data from CSV files
with_pheromones <- read.csv("ant_with_pheromones.csv")
# Load data from CSV files
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_without_pheromones.csv")
# Group labels
with_pheromones$group <- "with_pheromones"
no_pheromones$group <- "no_pheromones"
# Combine the datasets into one data frame
df <- rbind(with_pheromones, no_pheromones)
head(df)
# Check column names to ensure 'remaining_food' exists
print(colnames(df))
df$group <- factor(df$group, levels = c("with_pheromones", "no_pheromones"))
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_remaining_food = mean(remaining_food, na.rm = TRUE),
sd_remaining_food = sd(remaining_food, na.rm = TRUE),
median_remaining_food = median(remaining_food, na.rm = TRUE),
IQR_remaining_food = IQR(remaining_food, na.rm = TRUE),
se_remaining_food = sd_remaining_food / sqrt(count)
)
print(summary_stats)
ggplot(df, aes(x = remaining_food, fill = group)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 15) +
geom_density(alpha = 0.2) +
theme_minimal() +
labs(title = "Distribution of Food Left by Group",
x = "Food Left",
y = "Frequency") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +
theme(legend.title = element_blank())
# Shapiro-Wilk test for normality
shapiro_with <- shapiro.test(with_pheromones$remaining_food)
shapiro_without <- shapiro.test(no_pheromones$remaining_food)
print(shapiro_with)       # p = 0.007022 --> significant deviation from normality
print(shapiro_without)    # p = 0.5381 --> no significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
# Wilcoxon Rank-Sum Test (non-parametric)
wilcox_test_result <- wilcox.test(remaining_food ~ group, data = df)
print(wilcox_test_result)   # p-value < 2.2e-16 --> significant difference between groups
plot_summary <- summary_stats
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black") +  # Error bars for mean ± SE
geom_point(data = plot_summary,
aes(x = group, y = mean_remaining_food),
shape = 23, size = 3, fill = "white") +  # Mean points
geom_signif(comparisons = list(c("with_pheromones", "no_pheromones")),
map_signif_level = TRUE,
textsize = 6,
y_position = max(df$remaining_food, na.rm = TRUE) + 2) +  # Adjust y_position as needed
theme_minimal() +
labs(title = "Comparison of Food Left by Ants With and Without Pheromones",
x = "Group",
y = "Food Left") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +  # Blue and Orange
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14)
)
print(boxplot_final)
# Create plot for "with_pheromones"
plot_with <- ggplot(subset(df, group == "with_pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#1f77b4", size = 1) +  # Blue line
theme_minimal() +
labs(title = "With Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create plot for "no_pheromones"
plot_without <- ggplot(subset(df, group == "no_pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#ff7f0e", size = 1) +  # Orange line
theme_minimal() +
labs(title = "Without Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Arrange the two line plots side by side
grid.arrange(plot_with, plot_without, ncol = 2)
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
# Load data from CSV files
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_without_pheromones.csv")
# Assign group labels
with_pheromones$group <- "with_pheromones"
no_pheromones$group <- "no_pheromones"
# Combine the datasets into one data frame
df <- rbind(with_pheromones, no_pheromones)
# View the first few rows to verify
head(df)
# Check column names to ensure 'remaining_food' exists
print(colnames(df))
u
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_remaining_food = mean(remaining_food, na.rm = TRUE),
sd_remaining_food = sd(remaining_food, na.rm = TRUE),
median_remaining_food = median(remaining_food, na.rm = TRUE),
IQR_remaining_food = IQR(remaining_food, na.rm = TRUE),
se_remaining_food = sd_remaining_food / sqrt(count)
)
print(summary_stats)
# Histogram and Density Plot
ggplot(df, aes(x = remaining_food, fill = group)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 15) +
geom_density(alpha = 0.2) +
theme_minimal() +
labs(title = "Distribution of Food Left by Group",
x = "Food Left",
y = "Frequency") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +
theme(legend.title = element_blank())
# Shapiro-Wilk Test for normality
shapiro_with <- shapiro.test(with_pheromones$remaining_food)
shapiro_without <- shapiro.test(no_pheromones$remaining_food)
print(shapiro_with)       # p = 0.007022 --> significant deviation from normality
print(shapiro_without)    # p = 0.5381 --> no significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
df$group <- factor(df$group, levels = c("with_pheromones", "no_pheromones"))
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
# Shapiro-Wilk Test for normality
shapiro_with <- shapiro.test(with_pheromones$remaining_food)
shapiro_without <- shapiro.test(no_pheromones$remaining_food)
print(shapiro_with)       # p = 0.007022 --> significant deviation from normality
print(shapiro_without)    # p = 0.5381 --> no significant deviation from normality
# Levene's Test for homogeneity of variances
levene_result <- leveneTest(remaining_food ~ group, data = df)
print(levene_result)     # p = 0.09946 --> equal variances
# Wilcoxon Rank-Sum Test (non-parametric)
wilcox_test_result <- wilcox.test(remaining_food ~ group, data = df)
print(wilcox_test_result)   # p-value < 2.2e-16 --> significant difference between groups
plot_summary <- summary_stats
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black") +  # Error bars for mean ± SE
geom_point(data = plot_summary,
aes(x = group, y = mean_remaining_food),
shape = 23, size = 3, fill = "white") +  # Mean points
geom_signif(comparisons = list(c("with_pheromones", "no_pheromones")),
map_signif_level = TRUE,
textsize = 6,
y_position = max(df$remaining_food, na.rm = TRUE) + 2) +  # Adjust y_position as needed
theme_minimal() +
labs(title = "Comparison of Food Left by Ants With and Without Pheromones",
x = "Group",
y = "Food Left") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +  # Blue and Orange
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14)
)
# Display the boxplot
print(boxplot_final)
# Create plot for "with_pheromones"
plot_with <- ggplot(subset(df, group == "with_pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#1f77b4", size = 1) +  # Blue line
theme_minimal() +
labs(title = "With Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create plot for "no_pheromones"
plot_without <- ggplot(subset(df, group == "no_pheromones"), aes(x = run, y = remaining_food)) +
geom_line(color = "#ff7f0e", size = 1) +  # Orange line
theme_minimal() +
labs(title = "Without Pheromones",
x = "Run Number",
y = "Food Left") +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
library(ggplot2)
library(dplyr)
library(car)       # For Levene's Test
library(ggsignif)  # For significance annotations
library(gridExtra) # For arranging multiple plots
# Load data from CSV files
with_pheromones <- read.csv("ant_with_pheromones.csv")
no_pheromones <- read.csv("ant_without_pheromones.csv")
# Assign group labels
with_pheromones$group <- "with_pheromones"
no_pheromones$group <- "no_pheromones"
# Combine the datasets into one data frame
df <- rbind(with_pheromones, no_pheromones)
# View the first few rows to verify
head(df)
# Check column names to ensure 'remaining_food' exists
print(colnames(df))
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group))
print(boxplot_final)
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA)
print(boxplot_final)
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black")
plot_summary <- summary_stats
df$group <- factor(df$group, levels = c("with_pheromones", "no_pheromones"))
summary_stats <- df %>%
group_by(group) %>%
summarise(
count = n(),
mean_remaining_food = mean(remaining_food, na.rm = TRUE),
sd_remaining_food = sd(remaining_food, na.rm = TRUE),
median_remaining_food = median(remaining_food, na.rm = TRUE),
IQR_remaining_food = IQR(remaining_food, na.rm = TRUE),
se_remaining_food = sd_remaining_food / sqrt(count)
)
print(summary_stats)
plot_summary <- summary_stats
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group, ymin = mean_remaining_food - se_remaining_food, ymax = mean_remaining_food + se_remaining_food),
width = 0.2, color = "black")
print(boxplot_final)
print(plot_summary)
boxplot_final <- ggplot(df, aes(x = group, y = remaining_food, fill = group)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot without outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "black") +  # Jittered data points
geom_errorbar(data = plot_summary,
aes(x = group,
ymin = mean_remaining_food - se_remaining_food,
ymax = mean_remaining_food + se_remaining_food),
inherit.aes = FALSE,  # Ensure it doesn't inherit aesthetics from the global ggplot call
width = 0.2, color = "black") +  # Error bars
geom_point(data = plot_summary,
aes(x = group, y = mean_remaining_food),
inherit.aes = FALSE,  # Prevent inherited aesthetics
shape = 23, size = 3, fill = "white") +  # Mean points
theme_minimal() +
labs(title = "Comparison of Food Left by Ants With and Without Pheromones",
x = "Group",
y = "Food Left") +
scale_fill_manual(values = c("with_pheromones" = "#1f77b4", "no_pheromones" = "#ff7f0e")) +  # Colors
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14)
)
print(boxplot_final)
